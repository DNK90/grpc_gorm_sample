// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sample/sample.proto

/*
Package sample is a generated protocol buffer package.

It is generated from these files:
	sample/sample.proto

It has these top-level messages:
	EmptyParam
	Item
*/
package sample

import context "context"
import fmt "fmt"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"

import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type ItemORM struct {
	Description string
	Id          string
	Name        string
}

// TableName overrides the default tablename generated by GORM
func (ItemORM) TableName() string {
	return "items"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Item) ToORM(ctx context.Context) (ItemORM, error) {
	to := ItemORM{}
	var err error
	if prehook, ok := interface{}(m).(ItemWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	if posthook, ok := interface{}(m).(ItemWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ItemORM) ToPB(ctx context.Context) (Item, error) {
	to := Item{}
	var err error
	if prehook, ok := interface{}(m).(ItemWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Name = m.Name
	to.Description = m.Description
	if posthook, ok := interface{}(m).(ItemWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Item the arg will be the target, the caller the one being converted from

// ItemBeforeToORM called before default ToORM code
type ItemWithBeforeToORM interface {
	BeforeToORM(context.Context, *ItemORM) error
}

// ItemAfterToORM called after default ToORM code
type ItemWithAfterToORM interface {
	AfterToORM(context.Context, *ItemORM) error
}

// ItemBeforeToPB called before default ToPB code
type ItemWithBeforeToPB interface {
	BeforeToPB(context.Context, *Item) error
}

// ItemAfterToPB called after default ToPB code
type ItemWithAfterToPB interface {
	AfterToPB(context.Context, *Item) error
}

// DefaultCreateItem executes a basic gorm create call
func DefaultCreateItem(ctx context.Context, in *Item, db *gorm1.DB) (*Item, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ItemORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadItem executes a basic gorm read call
func DefaultReadItem(ctx context.Context, in *Item, db *gorm1.DB) (*Item, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &ItemORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ItemORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ItemORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ItemORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteItem(ctx context.Context, in *Item, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ItemORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type ItemORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteItemSet(ctx context.Context, in []*Item, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ItemORM{})).(ItemORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ItemORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ItemORM{})).(ItemORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ItemORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Item, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Item, *gorm1.DB) error
}

// DefaultStrictUpdateItem clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateItem(ctx context.Context, in *Item, db *gorm1.DB) (*Item, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateItem")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &ItemORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(ItemORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ItemORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchItem executes a basic gorm update call with patch behavior
func DefaultPatchItem(ctx context.Context, in *Item, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Item, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Item
	var err error
	if hook, ok := interface{}(&pbObj).(ItemWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadItem(ctx, &Item{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ItemWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskItem(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ItemWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateItem(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ItemWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ItemWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Item, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ItemWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Item, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ItemWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Item, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ItemWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Item, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetItem executes a bulk gorm update call with patch behavior
func DefaultPatchSetItem(ctx context.Context, objects []*Item, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Item, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Item, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchItem(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskItem patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskItem(ctx context.Context, patchee *Item, patcher *Item, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Item, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListItem executes a gorm list call
func DefaultListItem(ctx context.Context, db *gorm1.DB) ([]*Item, error) {
	in := Item{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &ItemORM{}, &Item{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ItemORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ItemORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Item{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ItemORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ItemORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]ItemORM) error
}
type SampleServiceDefaultServer struct {
	DB *gorm1.DB
}

// GetItem ...
func (m *SampleServiceDefaultServer) GetItem(ctx context.Context, in *Item) (*Item, error) {
	return &Item{}, nil
}

// ListItems ...
func (m *SampleServiceDefaultServer) ListItems(ctx context.Context, in *EmptyParam) (*Item, error) {
	return &Item{}, nil
}

// AddItem ...
func (m *SampleServiceDefaultServer) AddItem(ctx context.Context, in *Item) (*Item, error) {
	return &Item{}, nil
}
